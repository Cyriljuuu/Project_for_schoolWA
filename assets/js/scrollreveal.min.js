var ScrollReveal = function() {
    "use strict";
    var defaultConfig = {
      delay: 0,
      distance: "0",
      duration: 600,
      easing: "cubic-bezier(0.5, 0, 0, 1)",
      interval: 0,
      opacity: 0,
      origin: "bottom",
      rotate: { x: 0, y: 0, z: 0 },
      scale: 1,
      cleanup: false,
      container: document.documentElement,
      desktop: true,
      mobile: true,
      reset: false,
      useDelay: "always",
      viewFactor: 0,
      viewOffset: { top: 0, right: 0, bottom: 0, left: 0 },
      afterReset: function() {},
      afterReveal: function() {},
      beforeReset: function() {},
      beforeReveal: function() {}
    };
  
    var failure = function() {
      document.documentElement.classList.remove("sr");
      return {
        clean: function() {},
        destroy: function() {},
        reveal: function() {},
        sync: function() {},
        get noop() {
          return true;
        }
      };
    };
  
    function isNode(obj) {
      return (
        typeof window.Node === "object" ? obj instanceof window.Node : obj && typeof obj === "object" && typeof obj.nodeType === "number" && typeof obj.nodeName === "string"
      );
    }
  
    function toArray(obj, root) {
      if (typeof root === "undefined") {
        root = document;
      }
      if (Array.isArray(obj)) {
        return obj.filter(isNode);
      }
      if (isNode(obj)) {
        return [obj];
      }
      if (typeof obj === "string") {
        try {
          var nodeList = root.querySelectorAll(obj);
          return Array.prototype.slice.call(nodeList);
        } catch (e) {
          return [];
        }
      }
      return [];
    }
  
    function isObject(obj) {
      return obj !== null && typeof obj === "object" && (obj.constructor === Object || Object.prototype.toString.call(obj) === "[object Object]");
    }
  
    function forEach(obj, callback) {
      if (isObject(obj)) {
        Object.keys(obj).forEach(function(key) {
          return callback(obj[key], key, obj);
        });
      } else if (Array.isArray(obj)) {
        obj.forEach(function(item, index) {
          return callback(item, index, obj);
        });
      } else {
        throw new TypeError("Expected either an array or object literal.");
      }
    }
  
    function debugLog(message) {
      if (this.constructor.debug && console) {
        var logMessage = "%cScrollReveal: " + message;
        arguments.slice(1).forEach(function(arg) {
          return logMessage += "\n â€” " + arg;
        });
        console.log(logMessage, "color: #ea654b;");
      }
    }
  
    function cleanUp() {
      var _this = this;
      var staleElements = {
        active: [],
        stale: []
      };
      var staleContainers = {
        active: [],
        stale: []
      };
      var staleSequences = {
        active: [],
        stale: []
      };
  
      try {
        forEach(toArray("[data-sr-id]"), function(element) {
          var id = parseInt(element.getAttribute("data-sr-id"));
          staleElements.active.push(id);
        });
      } catch (e) {
        throw e;
      }
  
      forEach(this.store.elements, function(element, id) {
        if (!staleElements.active.includes(id)) {
          staleElements.stale.push(id);
        }
      });
      
      forEach(this.store.containers, function(container, id) {
        if (!staleElements.active.includes(id)) {
          staleContainers.stale.push(id);
        }
      });
      
      forEach(this.store.sequences, function(sequence, id) {
        if (!staleElements.active.includes(id)) {
          staleSequences.stale.push(id);
        }
      });
      
      forEach(staleElements.stale, function(id) {
        _this.store.elements[id].destroy();
        delete _this.store.elements[id];
      });
      
      forEach(staleContainers.stale, function(id) {
        _this.store.containers[id].destroy();
        delete _this.store.containers[id];
      });
      
      forEach(staleSequences.stale, function(id) {
        _this.store.sequences[id].destroy();
        delete _this.store.sequences[id];
      });
      
      this.store.elements = Object.filter(this.store.elements, function(element) {
        return element && !element.destroyed;
      });
      
      this.store.containers = Object.filter(this.store.containers, function(container) {
        return container && !container.destroyed;
      });
      
      this.store.sequences = Object.filter(this.store.sequences, function(sequence) {
        return sequence && !sequence.destroyed;
      });
      }
      
    }